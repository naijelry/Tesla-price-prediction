# -*- coding: utf-8 -*-
"""feature_corelation_matrix_calculate_MAE

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D553aq0vjoDgIv0H3_DzMLnrfKHpA89f
"""

# Feature correlation matrix
corr_matrix = df.corr()
plt.figure(figsize=(12, 10))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Feature Correlation Matrix')
plt.show()

# Function to create the target high and low prices
def create_targets(df, n_days=10):
    # Create the target high and low prices
    df['target_high'] = df['high'].shift(-n_days).rolling(window=n_days).max()
    df['target_low'] = df['low'].shift(-n_days).rolling(window=n_days).min()

    # Drop rows with NaN values in target columns (as they have no future data)
    df = df.dropna(subset=['target_high', 'target_low'])

    return df

# Create the targets
df = create_targets(df, n_days=10)

# Check if the targets were created correctly
print(df[['close', 'target_high', 'target_low']].head())

# Visualizing the target predictability - scatter plots with target high and low prices
plt.figure(figsize=(10, 5))
sns.scatterplot(data=df, x='close', y='target_high', color='blue', label='Target High Price')
sns.scatterplot(data=df, x='close', y='target_low', color='red', label='Target Low Price')
plt.title('Target Predictability (High/Low Prices)')
plt.legend()
plt.show()

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.model_selection import train_test_split
import numpy as np

# Define features and target
X = df[['close', '7_day_avg', '30_day_avg', '7_day_volatility', 'close_lag_1', 'close_lag_5', 'close_lag_10', 'day_of_week', 'month', 'is_weekend']]
y_high = df['target_high']
y_low = df['target_low']

# Train-Test Split
X_train, X_test, y_train_high, y_test_high = train_test_split(X, y_high, test_size=0.2, shuffle=False)
X_train, X_test, y_train_low, y_test_low = train_test_split(X, y_low, test_size=0.2, shuffle=False)

# Initialize and train the Random Forest model for high price prediction
model_high = RandomForestRegressor(n_estimators=5, random_state=42)
model_high.fit(X_train, y_train_high)

# Initialize and train the Random Forest model for low price prediction
model_low = RandomForestRegressor(n_estimators=5, random_state=42)
model_low.fit(X_train, y_train_low)

# Predict on the test set
y_pred_high = model_high.predict(X_test)
y_pred_low = model_low.predict(X_test)

# Evaluate model performance
mae_high = mean_absolute_error(y_test_high, y_pred_high)
rmse_high = np.sqrt(mean_squared_error(y_test_high, y_pred_high))
mae_low = mean_absolute_error(y_test_low, y_pred_low)
rmse_low = np.sqrt(mean_squared_error(y_test_low, y_pred_low))

print(f"High Price Prediction - MAE: {mae_high}, RMSE: {rmse_high}")
print(f"Low Price Prediction - MAE: {mae_low}, RMSE: {rmse_low}")

# Calculate MAPE (Mean Absolute Percentage Error)
def mean_absolute_percentage_error(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

mape_high = mean_absolute_percentage_error(y_test_high, y_pred_high)
mape_low = mean_absolute_percentage_error(y_test_low, y_pred_low)

print(f"High Price Prediction - MAPE: {mape_high}%")
print(f"Low Price Prediction - MAPE: {mape_low}%")